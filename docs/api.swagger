openapi: 3.0.3
info:
  title: THE (Teach Honor Excel) API
  description: API for a tutor agency website providing login, signup, profile, and tutoring functionalities for tutors and clients.
  version: 1.0.0
servers:
  - url: https://api.teachhonorexcel.com/v1
tags:
  - name: auth
    description: Authentication operations
  - name: tutor
    description: Tutor-specific operations
  - name: client
    description: Client-specific operations
  - name: assignment
    description: Assignment-specific operations
  - name: course
    description: Course-specific operations
  - name: chat
    description: endpoints for the live chat feature between clients and tutors
paths:
  /api/chat/{token}:
    get:
      tags:
        - chat
      summary: gets the chat history between the current user and the other user specified by token. to be split in separate pages
      responses:
        '200':
          description: Successful retrieval of chat history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          description: Invalid credentials
  /ws/chat/{token}:
    post:
      tags:
        - chat
      summary: sends a message to the other party
  /ws/chat/{token}/unlock:
    get:
      tags:
        - chat
      summary: Unlocks the chat for both users (tbc on implementation)
      responses:
        '200':
          description: Successful unlocking
        '401':
          description: Invalid credentials
  /api/auth/login:
    post:
      tags:
        - auth
      summary: Log in a user (tutor or client)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login. Both refresh and access tokens are stored as http cookies in the browser.
        '401':
          description: Invalid credentials
  /api/auth/signup:
    post:
      tags:
        - auth
      summary: Sign up a new user (tutor or client)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully and logged in. Both refresh and access tokens are stored as http cookies in the browser.
        '400':
          description: Invalid input or email already exists
  /api/auth/forgetpassword:
    post:
      tags:
        - auth
      summary: endpoint for user to submit email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: if the email is valid, a link has been sent
  /api/auth/resetpassword:
    post:
      tags:
        - auth
      summary: endpoint for user to submit email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: if the email is valid, a link has been sent
  /api/auth/verifyemail:
    post:
      tags:
        - auth
      summary: endpoint for user to submit email
      parameters:
        - name: key
          in: key
          required: true
          description: The unique key for email verification
          schema:
            type: string
      requestBody:
        required: false
      responses:
        '200':
          description: if the email is valid, a link has been sent
  /api/tutors:
    get:
      tags:
        - tutor
      summary: Search for tutors
      parameters:
        - name: query
          in: query
          required: false
          description: The search query for tutors
          schema:
            type: string
        - name: subjects
          in: query
          required: false
          description: List of subjects to filter by
          schema:
            type: array
            items:
              type: string
        - name: levels
          in: query
          required: false
          description: List of levels to filter by
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: A list of tutor summaries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TutorPublicSummaryList'
  /api/tutors/create:
    post:
        tags:
          - tutor
        summary: creates a tutor profile. authorization required
        requestBody:
          required: true
          description: parameters tutors are expected to have
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TutorProfile'
        responses:
          '200':
            description: confirmation of successful creation
  /api/tutors/profile/{id}:
    get:
      tags:
        - tutor
      summary: retrieves the details of a tutor specified by id
      responses:
        '200':
          description: the details of a single tutor, with fields depending on the authorization level of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TutorProfile'
    put:
      tags:
        - tutor
      summary: updates details of a tutor profile. specific tutor authorization required
      requestBody:
        required: true
        description: parameters tutors are expected to have
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TutorProfile'
      responses:
        '200':
          description: confirmation of successful update
  /api/tutors/request/{id}:
    post:
      tags:
        - tutor
      summary: submits a client request of a specific tutor
      requestBody:
        required: true
        description: information identifying a unique client and tutor, with timestamp
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientTutorRequest'
      responses:
        '200':
          description: confirmation of successful request
  /api/assignments:
    get:
      tags:
        - assignment
      summary: get the data to populate the page which shows all courses
      parameters:
        - in: query
          name: query
          schema:
            type: string
          required: false
          description: query string to search
        - in: filter
          name: filter
          schema:
            type: string
          required: false
          description: filter assignments based on type. dynamically choose filters based on backend database and update the frontend
        - in: sort
          name: sort
          schema:
            type: string
          required: false
          description: ordering of assignments
      responses:
        '200':
          description: Successful retrieval of assignments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentSummaryList'
  /api/assignments/create:
    post:
        tags:
          - assignment
        summary: creates an assignment. client authorization required
        requestBody:
          required: true
          description: parameters assignments are expected to have
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        responses:
          '200':
            description: confirmation of successful creation
  /api/assignments/item/{id}:
    get:
      tags:
        - assignment
      summary: retrieves the details of an assignment specified by id. if client is owner, then will see tutors who requested
      responses:
        '200':
          description: the details of a single assignment, with fields depending on the authorization level of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
    put:
      tags:
        - assignment
      summary: updates details of an assignment. specific client authorization required
      requestBody:
        required: true
        description: parameters tutors are expected to have
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
      responses:
        '200':
          description: confirmation of successful update
  /api/assignments/request/{id}:
    post:
        tags:
          - assignment
        summary: creates a request for an assignment specified by id. tutor authorization required
        requestBody:
          required: true
          description: information identifying a unique tutor and assignment, with timestamp
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TutorAssignmentRequest'
        responses:
          '200':
            description: confirmation of successful creation
  /api/clients/profile/create:
    post:
      tags:
        - client
      summary: creates a client profile. authorization required
      requestBody:
        required: true
        description: parameters the clients are expected to have
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfile'
      responses:
        '200':
          description: confirmation of successful creation
  /api/clients/profile/{id}:
    get:
      tags:
        - client
      summary: retrieves the details of a client specified by id
      responses:
        '200':
          description: the details of a single client, with fields depending on the authorization level of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientProfile'
    put:
      tags:
        - client
      summary: updates details of a client profile. specific client authorization required
      requestBody:
        required: true
        description: parameters the clients are expected to have
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientProfile'
      responses:
        '200':
          description: confirmation of successful update
  /api/courses:
    get:
      tags:
        - course
      summary: get the data to populate the page which shows all courses
      parameters:
        - name: query
          in: query
          required: false
          description: The search query. Omitting means all results are returned.
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoursePublicSummaryList'
  /api/courses/{course-id}:
    get:
      tags:
        - course
      summary: Get the data to populate the page which shows all modules in a course
      responses:
        '200':
          description: Successful retrieval of modules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseModuleList'
  /api/courses/{course-id}/{module-id}:
    get:
      tags:
        - module
      summary: Get data of each module specified by id
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the module
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseModule'
  /api/nus-course-reviews:
    get:
      tags:
        - reviews
      summary: Retrieve a list of all nus courses with their majors
      responses:
        '200':
          description: A list of nus courses with their corresponding majors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MajorList'
  /api/nus-course-reviews/{nusCourseCode}:
    get:
      tags:
        - reviews
      summary: Retrieve reviews for a specific nus course
      responses:
        '200':
          description: Details and reviews for the specified course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
components:
  schemas:
    MajorList:
      type: array
      items:
        type: object
        required:
          - name
          - modules
        properties:
          name:
            type: string
          modules:
            type: array
            items:
              $ref: '#/components/schemas/Module'
    Module:
      type: object
      items:
        type: object
        required:
          - code
          - name
          - reviews
        properties:
          code:
            type: string
          name:
            type: string
          reviews:
            type: array
            items:
              $ref: '#/components/schemas/Review'
    Review:
      items:
        type: object
        required:
          - yearSem
          - workload
          - difficulty
          - overview
          - otherPoints
          - reviewer
        properties:
          yearSem:
            type: string
          workload:
            type: number
          difficulty:
            type: number
          overview:
            type: string
          otherPoints:
            type: string
          reviewer:
            items:
              type: object
              required:
                - year
                - course
                - specialisation
              properties:
                year:
                  type: number
                course:
                  type: string
                specialization:
                  type: string
    CoursePublicSummaryList:
      type: array
      items:
        type: object
        required:
          - id
          - name
          - description
          - progress
        properties:
          id:
            type: string
          name:
            type: string
          description:
            type: string
          progress:
            type: number
          fileLink:
            type: string
    CourseModuleList:
      type: array
      items:
        $ref: '#/components/schemas/CourseModule'
    CourseModule:
      type: object
      required:
        - courseOverview
        - mode
        - progress
        - id
        - title
        - completed
        - locked
      properties:
        courseOverview:
          type: string
        mode:
          type: string [video, quiz, test]
        progress:
          type: number
        id:
          type: number
        name:
          type: string
        completed:
          type: boolean
        locked:
          type: boolean
        videoUrl:
          type: string
        score:
          type: number
    TutorSearchQuery:
      type: object
      required:
        - query
        - subjects
        - levels
      properties:
        query:
          type: string
        subjects:
          type: array
          items:
            type: string
        levels:
          type: array
          items:
            type: string
    TutorPublicSummaryList:
      type: array
      items:
        type: object
        required:
          - id
          - name
          - photoUrl
          - rate
          - rating
          - subjectsTeachable
          - levelsTeachable
          - experience
          - availability
        properties:
          id:
            type: string
          name:
            type: string
          photoUrl:
            type: string
          rate:
            type: string
          rating:
            type: number
          subjectsTeachable:
            type: array
            items:
              type: string
          levelsTeachable:
            type: array
            items:
              type: string
          experience:
            type: string
          availability:
            type: string
    ClientPublicSummaryList:
      type: array
      items:
        type: object
        required:
          - id
          - name
          - school
          - subjects
        properties:
          id:
            type: string
          name:
            type: string
          school:
            type: string
          subjects:
            type: array
            items:
              type: string
    TutorProfile:
      type: object
      required:
        - id
        - name
        - contact
        - email
        - photo
        - highestEducation
        - rate
        - location
        - rating
        - aboutMe
        - subjectsTeachable
        - levelsTeachable
        - specialSkills
        - resume
        - experience
        - availability
        - isProfileComplete
      properties:
        id:
          type: string
        name:
          type: string
        contact:
          type: string
        email:
          type: string
        photoUrl:
          type: string
        highestEducation:
          type: string
        rate:
          type: string
        location:
          type: string
        rating:
          type: number
        aboutMe:
          type: string
        subjectsTeachable:
          type: array
          items:
            type: string
        levelsTeachable:
          type: array
          items:
            type: string
        specialSkills:
          type: array
          items:
            type: string
        resumeUrl:
          type: string
        experience:
          type: string
        availability:
          type: string
        isProfileComplete:
          type: boolean
    ClientProfile:
      type: object
      required:
        - id
        - name
        - school
        - level
        - subjects
        - isProfileComplete
      properties:
        id:
          type: string
        name:
          type: string
        school:
          type: string
        level:
          type: string
        subjects:
          type: array
          items:
            type: string
        contact:
          type: string
        email:
          type: string
        isProfileComplete:
          type: boolean
    ClientTutorRequest:
      type: object
      required:
      - clientId
      - datetime
      properties:
        clientId:
          type: number
        datetime:
          type: string
    Assignment:
      type: object
      required:
        - id
        - datetime
        - clientId
        - tutorId
        - estimatedRate
        - weeklyFrequency
        - availableSlots
        - specialRequests
        - status
      properties:
        id:
          type: number
        datetime:
          type: string
        clientId:
          type: number
        tutorId:
          type: number
        estimatedRate:
          type: string
        weeklyFrequency:
          type: string
        availableSlots:
          type: array
          items:
            type: string
        specialRequests:
          type: string
        status:
          type: string
    AssignmentSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/Assignment'
    TutorAssignmentRequest:
      type: object
      required:
      - tutorId
      - datetime
      properties:
        tutorId:
          type: string
        datetime:
          type: string
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        userType:
          type: string
          enum:
            - tutor
            - client
    SignupRequest:
      type: object
      required:
        - email
        - password
        - name
        - userType
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        name:
          type: string
        userType:
          type: string
          enum:
            - tutor
            - client
    Message:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the message
        user_id:
          type: string
          description: The ID of the user who sent the message
        content:
          type: string
          description: The content of the message
        timestamp:
          type: string
          format: date-time
          description: The timestamp of when the message was sent